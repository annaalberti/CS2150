//Anna Alberti
//aca5z
//11/30/2021

#include <iostream>
#include <sstream>
#include <string>
using namespace std;

//questions
//1. hard coding to get neighbors
//2. storing the "graph" --> use unordered_map<int[3][3], list<int[3][3]>> ?
//3. pseudocode for unweighted shortest path in slides, how will that translate to this?


//this function will get the neighboring configurations give the placement
// of the 0 in the array
// it returns the given puzzle, but with pointers to it's neighbors
int* getNeighbors(int puzz[3][3]){
  int neighbor1[3][3];
  int neighbor2[3][3];
  int neighbor3[3][3];
  int neighbor4[3][3];
  //corner spaces
  if(puzz[0][0] == 0){ //if the 0 is in the top left corner
    neighbor1 = puzz;
    neighbor2 = puzz;
    neighbor1[0][0] = puzz[1][0]; //move (1,0) to (0,0)
    neighbor1[1][0] = 0; //put zero in new place

    neighbor2[0][0] = puzz[0][1];
    neighbor2[0][1] = 0; 
  }
  if(puzz[0][2] == 0){ //if the 0 is in the top right corner
    int neighbor1[3][3] = puzz;
    int neighbor2[3][3] = puzz;
    neighbor1[0][2] = puzz[0][1];
    neighbor1[0][1] = 0;

    neighbor2[0][2] = puzz[1][2];
    neighbor2[1][2] = 0;
  }
  if(puzz[2][0] == 0){ //if the 0 is in the bottom left corner
    int neighbor1[3][3] = puzz;
    int neighbor2[3][3] = puzz;
    neighbor1[2][0] = puzz[0][1];
    neighbor1[0][1] = 0;

    neighbor2[2][0] = puzz[2][1];
    neighbor2[2][1] = 0;
    
  }
  if(puzz[2][2] == 0){ //if the 0 is in the bottom right corner
    int neighbor1[3][3] = puzz;
    int neighbor2[3][3] = puzz;
    neighbor1[2][2] = puzz[1][2];
    neighbor1[1][2] = 0;

    neighbor2[2][2] = puzz[2][1];
    neighbor2[2][1] = 0;
  }
  //middle spaces
  if (puzz[0][1] == 0){ // top middle
    int neighbor1[3][3] = puzz;
    int neighbor2[3][3] = puzz;
    int neighbor3[3][3] = puzz;
    
    neighbor1[0][1] = puzz[0][0];
    neighbor1[0][0] = 0;

    neighbor2[0][1] = puzz[0][2];
    neighbor2[0][2] = 0;

    neighbor3[0][1] = puzz[1][1];
    neighbor3[1][1] = 0;
  }
  if (puzz[1][2] == 0) { // right middle
    int neighbor1[3][3] = puzz;
    int neighbor2[3][3] = puzz;
    int neighbor3[3][3] = puzz;
    
    neighbor1[1][2] = puzz[0][2];
    neighbor1[0][2] = 0;

    neighbor2[1][2] = puzz[2][2];
    neighbor2[2][2] = 0;

    neighbor3[1][2] = puzz[1][1];
    neighbor3[1][1] = 0;
  }
  if( puzz[2][1] == 0) { //bottom middle
    int neighbor1[3][3] = puzz;
    int neighbor2[3][3] = puzz;
    int neighbor3[3][3] = puzz;
    
    neighbor1[2][1] = puzz[2][2];
    neighbor1[2][2] = 0;

    neighbor2[2][1] = puzz[2][0];
    neighbor2[2][0] = 0;

    neighbor3[2][1] = puzz[1][1];
    neighbor3[1][1] = 0;
  }
  if(puzz[1][0] == 0){ //left middle
   int neighbor1[3][3] = puzz;
    int neighbor2[3][3] = puzz;
    int neighbor3[3][3] = puzz;
    
    neighbor1[1][0] = puzz[0][0];
    neighbor1[0][0] = 0;

    neighbor2[1][0] = puzz[2][0];
    neighbor2[2][0] = 0;

    neighbor3[1][0] = puzz[1][1];
    neighbor3[1][1] = 0;
  }
  //center of the puzzle
  if(puzz[1][1] = 0){
    int neighbor1[3][3] = puzz;
    int neighbor2[3][3] = puzz;
    int neighbor3[3][3] = puzz;
    itn neighbor4[3][4] = puzz;
    
    neighbor1[1][1] = puzz[0][1]; //top mid
    neighbor1[0][1] = 0;

    neighbor2[1][1] = puzz[2][1]; //bottom mid
    neighbor2[2][1] = 0;

    neighbor3[1][1] = puzz[1][0]; //left mid
    neighbor3[1][0] = 0;

    neighbor4[1][1] = puzz[1][2]; //right mid
    neighbor3[1][2] = 0;
  }
  
}
int main(){
  int puzzle[3][3];
  int goalPuzzle[3][3];
  goalPuzzle[0][0] = 1;
  goalPuzzle[0][1] = 2;
  goalPuzzle[0][2] = 3;
  goalPuzzle[1][0] = 4;
  goalPuzzle[1][1] = 5;
  goalPuzzle[1][2] = 6;
  goalPuzzle[2][0] = 7;
  goalPuzzle[2][1] = 8;
  goalPuzzle[2][2] = 0;
 


  
  cout << "Enter puzzle " <<endl;
  string input;
  int a, b, c;
  int row = 0;
  while(getline(cin,input)  && !input.empty() && row<=2){
    
    stringstream ss(input);
    ss >> a >> b >> c;
    if (!ss) {
      cout << "invalid" << endl;
    } else{
      puzzle[row][0] = a;
      puzzle[row][1] = b;
      puzzle[row][2] = c;
    }
    row++;
  }
  //test to see if my array is what i want it to be
  for (int rows=0; rows <=2; rows++){
    for (int cols=0; cols <=2; cols++){
    cout << puzzle[rows][cols] << endl;
  }
  }
  for (int rows=0; rows <=2; rows++){
    for (int cols=0; cols <=2; cols++){
    cout << goalPuzzle[rows][cols] << endl;
  }
}
}


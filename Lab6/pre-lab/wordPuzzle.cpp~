//Anna Alberti aca5z
// 10/13/2021

using namespace std;
#include <iostream>
#include "timer.h"
//#include "primenumber.cpp"
//friend class primenumber; //why isn't this working
//friend class getWordInGrid;
//#include "getWordInGrid.cpp"
//#include <unordered_set>
#include "hashTable.h"
#include <fstream>


//copy and paste from getWordInGrid.cpp
// We create a 2-D array of some big size, and assume that the grid
// read in will be less than this size (a valid assumption for lab 6)
#define MAXROWS 500
#define MAXCOLS 500
char grid[MAXROWS][MAXCOLS];

/** This function will read in a grid file, as per the format in the
 * CS 2150 lab 6 document, into a global grid[][] array.  It uses C++
 * file streams, and thus requires the the <fstream> #include header.
 *
 * @return true or false, depending on whether the file was
 *         successfully opened.
 * @param filename The file name to read in -- it's assumed to be in
 *                 the file format described in the lab document.
 * @param rows The number of rows as specified in the input file;
 *             as this is a reference, it is set by the function.
 * @param cols The number of columns as specified in the input file;
 *             as this is a reference, it is set by the function.
 */
bool readInGrid(string filename, int& rows, int& cols) {
    // try to open the file
    ifstream file(filename);
    // upon an error, return false
    if (!file.is_open()) {
        return false;
    }

    // first comes the number of rows
    file >> rows;
    //cout << "There are " << rows << " rows." << endl;

    // then the columns
    file >> cols;
    //cout << "There are " << cols << " cols." << endl;

    // and finally the grid itself
    string data;
    file >> data;

    // close the file
    file.close();

    // convert the string read in to the 2-D grid format into the
    // grid[][] array.
    // In the process, we'll print the grid to the screen as well.
    int pos = 0; // the current position in the input data
    for (int r = 0; r < rows; r++) {
        for (int c = 0; c < cols; c++) {
            grid[r][c] = data[pos++];
            //cout << grid[r][c];
        }
        //cout << endl;
    }
    return true;
}

/** This function will retrieve a word in a grid of letters in a given
 * direction.  If the end of the grid is encountered before the length
 * of the desired string is reached, then a shorter string will be
 * returned.  The data is retrieved from a global char grid[][]
 * array, which is assumed to be defined (and in scope).  NOTE: The
 * return value is a static string variable (for efficiency
 * reasons), so a successive return value will overwrite a previous
 * return value.
 *
 * @return A STATIC string containing the letters in the provided direction.
 * @param startRow The starting (row,col) position to find the word.
 * @param startCol The starting (row,col) position to find the word.
 * @param dir The direction to move: 0 is north (upwards), 1 is
 *            northeast, and it rotates around clockwise until it
 *            reaches 7 for northwest.
 * @param len The desired length of the string to return (assuming
 *            the edge of the grid is not reached--if the edge of the
 *            grid is reached, it will return as many characters as
 *            possible up to the edge of the grid, so the returned
 *            string may not have the same length as this parameter
 *            indicates).
 * @param numRows The number of rows in the global char grid[][]
 *                array.
 * @param numCols The number of columns in the global char grid[][]
 *                array.
 */
string getWordInGrid (int startRow, int startCol, int dir, int len,
                      int numRows, int numCols) {
    // the static-ness of this variable prevents it from being
    // re-declared upon each function invocation.  It also prevents it
    // from being deallocated between invocations.  It's probably not
    // good programming practice, but it's an efficient means to return
    // a value.
    static string output;
    output.clear(); // Since it's static we need to clear it
    output.reserve(256); // Can't set capacity in the constructor so do it the first time here

    // the position in the output array, the current row, and the
    // current column
    int r = startRow, c = startCol;
    // iterate once for each character in the output
    for (int i = 0; i < len; i++) {
        // if the current row or column is out of bounds, then break
        if (c >= numCols || r >= numRows || r < 0 || c < 0) {
            break;
        }

        // set the next character in the output array to the next letter
        // in the grid
        output += grid[r][c];

        // move in the direction specified by the parameter
        switch (dir) { // assumes grid[0][0] is in the upper-left
            case 0:
                r--;
                break; // north
            case 1:
                r--;
                c++;
                break; // north-east
            case 2:
                c++;
                break; // east
            case 3:
                r++;
                c++;
                break; // south-east
            case 4:
                r++;
                break; // south
            case 5:
                r++;
                c--;
                break; // south-west
            case 6:
                c--;
                break; // west
            case 7:
                r--;
                c--;
                break; // north-west
        }
    }
    return output;
}


int main(int argc, char **argv){ //command line parameters
  timer t;

  int rows, cols;
  //reading in the grid
  readInGrid(argv[2], rows, cols); //confused about this, is this stored in 
  
  //reading in the dictionary
  string line;
  ifstream myfile(argv[1]); // try to open the file
  //if not open, return false?
  int w = 0;
  if(myfile.is_open()){
    while (getline(myfile, line)){
      w+=1;
    }
    //cout << "number of words in file: "<< w << endl;
  }

 //declaring hashTable for dictionary
 // unordered_set<string> dictionary;
  hashTable dictionary(w);
  
  
    ifstream file(argv[1]); // try to open the file
  if(file.is_open()){
    while (getline(file, line)){
      //add each line to a the hash table
      dictionary.insert(line); //is this right
    }
    file.close();
      }
  //Output every word of length three or greater and its location in the grid
  
  int wordCounter = 0;

  
  t.start();
for(int b = 0; b < rows; b++) { // row number
  //cout << "row: " << b << endl;
  for(int c = 0; c < cols; c++) { //column number
    //cout << "col: " << c << endl;
    for(int d = 0; d<=7; d++) {       //direction
      //cout << "direction number: " << d<< endl;
    for (int a = 3; a < 22; a++) { //the length of the word
	//call find on the hashtable to check if it's the same
      //cout << "length of word: " << a <<  endl;
	  string word = getWordInGrid(b, c, d, a, rows, cols);
	  if (word.length()== a){
	    if(dictionary.find(word)){ //returns a bool in my implementation
	    //if(dictionary.find(word) != dictionary.end()){ // if word is in dictionary
	    //cout<< "the word is " << word << endl;
		  //cout << "WORD FOUND!" << endl;
	    if (d == 0){
	      //if(c>2){
	      cout <<"N " <<"(" << b <<", " << c << "): " << getWordInGrid(b, c, d, a, rows, cols) << endl;
	      //}
	      wordCounter++;
	    } else if (d==1){
	      //if (c>2 && (rows-b) >2){
	      cout <<"NE " <<"(" << b <<", " << c << "): " << getWordInGrid(b, c, d, a, rows, cols) << endl;
	      //}
	      wordCounter++;
	    } else if (d==2){
	      //if (rows-b >2){
	      cout <<"E " <<"(" << b <<", " << c << "): " << getWordInGrid(b, c, d, a, rows, cols) << endl;
	      //}
	      wordCounter++;
	    }else if (d==3){
	      //if ( (rows-b)>2 && (cols-c)>2){
	   cout <<"SE " <<"(" << b <<", " << c << "): " << getWordInGrid(b, c, d, a, rows, cols) << endl;
	   //}
	    wordCounter++;

	    }else if (d==4){
	      //if(cols-c >2){
	  cout <<"S " <<"(" << b <<", " << c << "): " << getWordInGrid(b, c, d, a, rows, cols) << endl;
	  //}
	   wordCounter++;
	    }else if (d==5){
	      //if( (cols-c>2) && b>2){
	    cout <<"SW " <<"(" << b <<", " << c << "): " << getWordInGrid(b, c, d, a, rows, cols) << endl;
	    // }
	    wordCounter++;

	    }else if (d==6){
	      //if (b>2){
	      cout <<"W " <<"(" << b <<", " << c << "): " << getWordInGrid(b, c, d, a, rows, cols) << endl;
	      //}
	   wordCounter++;

	    }else if (d==7){
	      //if( c>2 && b>2){
	     cout <<"NW " <<"(" << b <<", " << c << "): " << getWordInGrid(b, c, d, a, rows, cols) << endl;
	     //}
	      wordCounter++;
	    }
	  }
	  } 
    }
    }
  }
 }
    cout << wordCounter  << " words found" << endl;
    t.stop();
    double time = t.getTime();
    cout << "The time taken: " << time << endl;

}
  
